namespace Ponca
{
/*!
  \page spatialpartitioning Spatial Partitioning: User Manual

  <center>[\ref user_manual_page "Go back to user manual"]</center>

  \tableofcontents

  \section spatialpartitioning_intro Introduction
  This module provides spatial datastructures (e.g., Ponca::KdTree) to speed up spatial queries (e.g., neighbors search).

  \subsection spatialpartitioning_kdtree_usage Basic usage
  The class Ponca::KdTree provides methods to construct a tree and query points neighborhoods.

  \subsubsection spatialpartitioning_kdtree_usage_construction Construction
  As for the other modules, the point type is defined by a template parameter `DataPoint`.
  At construction time, the coordinates are copied in the tree from a container provided by the caller.
  For instance, to generate a tree from a random point cloud:
  \snippet tests/src/kdtree_knearest.cpp Kdtree construction

  For convenience, it is possible to convert the custom input points to `DataPoint` using a converter.

  Also, it is possible to provide a set of indices to sample a subset of the input point during the construction.
  Here, to randomly select half of the points:
  \snippet tests/src/kdtree_range.cpp Kdtree sampling construction


  \subsubsection spatialpartitioning_kdtree_usage_queries Queries
  Queries are objects generated by Ponca::KdTree, and are designed as `Range`: accessing the neighbors requires to
  iterate over the query.
  Here an example from the test suite, where the indices returned from the queries are compared with an explicit search
  \snippet tests/src/kdtree_knearest.cpp Kdtree construction and query
  which can be seamlessly combined with Basket::computeWithIds
  \snippet basket.cpp Fit computeWithIds

  Several query types are provided (see KdTreeBase for related method list):
   - KdTreeKNearestIndexQuery and KdTreeKNearestPointQuery
   - KdTreeNearestIndexQuery and KdTreeNearestPointQuery
   - KdTreeRangeIndexQuery and KdTreeRangePointQuery

  \note As queries are objets that are independent from the KdTree, they can be created and used in parallel from
  multiple threads.



  \subsection spatialpartitioning_kdtree_extending Extending KdTree
  Ponca::KdTreeBase is a customizable version of Ponca::KdTree, which can be controlled using `Traits`.
  See KdTreeDefaultTraits for customization API.


  <center>[\ref user_manual_page "Go back to user manual"]</center>
 */
}